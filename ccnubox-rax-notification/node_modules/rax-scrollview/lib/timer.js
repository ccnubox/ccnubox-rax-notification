'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var requestAnimationFrame = typeof requestAnimationFrame === 'undefined' ? typeof webkitRequestAnimationFrame === 'undefined' ? function (job) {
  return setTimeout(job, 16);
} : webkitRequestAnimationFrame : requestAnimationFrame;

var cancelAnimationFrame = typeof cancelAnimationFrame === 'undefined' ? typeof webkitCancelAnimationFrame === 'undefined' ? clearTimeout : webkitCancelAnimationFrame : cancelAnimationFrame;

var TYPES = {
  START: 'start',
  END: 'end',
  RUN: 'run',
  STOP: 'stop'
};

var easing = {
  easeOutSine: function easeOutSine(x) {
    return Math.sin(x * Math.PI / 2);
  }
};

var MIN_DURATION = 1;

var noop = function noop() {};

var Timer = function () {
  function Timer(config) {
    _classCallCheck(this, Timer);

    this.config = _extends({
      easing: 'linear',
      duration: Infinity,
      onStart: noop,
      onRun: noop,
      onStop: noop,
      onEnd: noop
    }, config);
  }

  _createClass(Timer, [{
    key: 'run',
    value: function run() {
      var _config = this.config,
          duration = _config.duration,
          onStart = _config.onStart,
          onRun = _config.onRun;

      if (duration <= MIN_DURATION) {
        this.isfinished = true;
        onRun({ percent: 1 });
        this.stop();
      }
      if (this.isfinished) return;
      this._hasFinishedPercent = this._stop && this._stop.percent || 0;
      this._stop = null;
      this.start = Date.now();
      this.percent = 0;
      onStart({ percent: 0, type: TYPES.START });
      // epsilon determines the precision of the solved values
      var epsilon = 1000 / 60 / duration / 4;
      this.easingFn = easing[this.config.easing];
      this._run();
    }
  }, {
    key: '_run',
    value: function _run() {
      var _this = this;

      var _config2 = this.config,
          onRun = _config2.onRun,
          onStop = _config2.onStop;

      this._raf && cancelAnimationFrame(this._raf);
      this._raf = requestAnimationFrame(function () {
        _this.now = Date.now();
        _this.t = _this.now - _this.start;
        _this.duration = _this.now - _this.start >= _this.config.duration ? _this.config.duration : _this.now - _this.start;
        _this.progress = _this.easingFn(_this.duration / _this.config.duration);
        _this.percent = _this.duration / _this.config.duration + _this._hasFinishedPercent;
        if (_this.percent >= 1 || _this._stop) {
          _this.percent = _this._stop && _this._stop.percent ? _this._stop.percent : 1;
          _this.duration = _this._stop && _this._stop.duration ? _this._stop.duration : _this.duration;

          onRun({
            percent: _this.progress,
            originPercent: _this.percent,
            t: _this.t,
            type: TYPES.RUN
          });

          onStop({
            percent: _this.percent,
            t: _this.t,
            type: TYPES.STOP
          });

          if (_this.percent >= 1) {
            _this.isfinished = true;
            _this.stop();
          }
          return;
        }

        onRun({
          percent: _this.progress,
          originPercent: _this.percent,
          t: _this.t,
          type: TYPES.RUN
        });

        _this._run();
      });
    }
  }, {
    key: 'stop',
    value: function stop() {
      var onEnd = this.config.onEnd;

      this._stop = {
        percent: this.percent,
        now: this.now
      };
      onEnd({
        percent: 1,
        t: this.t,
        type: TYPES.END
      });
      cancelAnimationFrame(this._raf);
    }
  }]);

  return Timer;
}();

exports.default = Timer;
module.exports = exports['default'];